(function(){ function _getCompiled(nools){ return nools.compile({"define":[{"name":"Cell","properties":"({\n state : \"dead\",\n evaluated: false,\n __queuedState : null,\n constructor: function(){\n this.neighbors = [];\n },\n\n numberOfLiveNeighbors: function(){\n var live = 0, neighbors = this.neighbors, neighbor;\n for(var i = 0, l = neighbors.length; i < l; i++){\n if(neighbors[i].state === \"live\"){\n live++;\n }\n }\n return live;\n },\n\n addNeighbor: function(neighbor){\n this.neighbors.push(neighbor);\n neighbor.neighbors.push(this);\n return this;\n },\n\n queueNextState: function(state){\n if(this.state !== state){\n this.__queuedState = state;\n }\n },\n\n transition: function(){\n var ret = false;\n if(this.__queuedState !== null){\n this.state = this.__queuedState;\n this.__queuedState = null;\n ret = true;\n }\n return ret;\n }\n\n})"}],"rules":[{"name":"Populate","options":{},"constraints":[["String","state","state == 'populate'"],["Array","cells"]],"action":"loop(cells, function(cell){\n assert(cell);\n })\n emit(\"evaluate\");\n retract(state);\n assert(\"evaluate\");\n "},{"name":"KillTheLonely","options":{},"constraints":[["String","state","state == 'evaluate'"],["Cell","c","c.state == 'live' && c.numberOfLiveNeighbors() < 2"]],"action":"c.queueNextState(\"dead\");\n "},{"name":"KillTheOverCrowded","options":{},"constraints":[["String","state","state == 'evaluate'"],["Cell","c","c.state == 'live' && c.numberOfLiveNeighbors() > 3"]],"action":"c.queueNextState(\"dead\");\n "},{"name":"GiveBirth","options":{},"constraints":[["String","state","state == 'evaluate'"],["Cell","c","c.state == 'dead' && c.numberOfLiveNeighbors() == 3"]],"action":"c.queueNextState(\"live\");\n "},{"name":"ShouldTransition","options":{},"constraints":[["String","state","state == 'evaluate'"]],"action":"retract(state);\n assert(\"transition\");\n "},{"name":"Transition","options":{},"constraints":[["Array","cells"],["String","state","state == 'transition'"]],"action":"retract(state);\n var transitioned = false;\n loop(cells, function(cell){\n retract(cell);\n if(cell.transition()){\n emit(\"cell-transition\", cell);\n transitioned = true;\n }\n });\n assert(transitioned ? \"populate\" : \"done\");\n "},{"name":"Done","options":{},"constraints":[["Array","cells"],["String","state","state == 'done'"]],"action":"console.log(\"Done\");\n "}],"scope":[{"name":"loop","body":"function(cells, cb){\n var rows = cells.length, cols = cells[0].length;\n for (var i = 0; i < rows; i++) {\n for (var j = 0; j < cols; j++) {\n cb(cells[i][j], i, j, cells);\n }\n }\n}"}]}, {name : "conways"}); } if ("undefined" !== typeof exports) { if ("undefined" !== typeof module && module.exports) { return _getCompiled(require("nools")); } } else if ("function" === typeof define && define.amd) { define(["nools"], function (nools) { return _getCompiled(nools); }); } else { _getCompiled(this.nools); } }).call(this);
